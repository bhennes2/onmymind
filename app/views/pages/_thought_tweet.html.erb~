	<textarea id="input_thought"></textarea>
	<!--<div class="visual_search span8"></div>-->
	<a id="quick_remember" class="btn btn-success">Remember</a>
	<div id="locations">
		<input type="hidden" id="position_holder" />
	</div>

<script>

		$("#input_thought").keyup(function(){
			var str = $("#input_thought").val();
			var last = str.charAt(str.length - 1);
			if (last == "@"){
				/*var position = $("#position_holder").position();
				position = [position.left, position.top];
				$("#locations").dialog( {position: position, closeText: "" });*/

				var locations = ["@near", "@far", "@wherever"];
				function split( val ) {
					return val.split( /,\s*/ );
				}
				function extractLast( term ) {
					return split( term ).pop();
				}
				$("#input_thought")
					.autocomplete({
						minLength: 0,
						source: locations,
						focus: function() {
							// prevent value inserted on focus
							return false;
						},
						select: function( event, ui ) {
							var terms = split( this.value );
							// remove the current input
							terms.pop();
							// add the selected item
							terms.push( ui.item.value );
							// add placeholder to get the comma-and-space at the end
							terms.push( "" );
							this.value = terms.join( ", " );
							return false;
						}
					});
			}
			if (last == "#"){
				/*var position = $("#position_holder").position();
				position = [position.left, position.top];
				$("#locations").dialog( {position: position, closeText: "" });*/

				var locations = ["#near", "#far", "#wherever"];
				function split( val ) {
					return val.split( /,\s*/ );
				}
				function extractLast( term ) {
					return split( term ).pop();
				}
				$("#input_thought")
					.autocomplete({
						minLength: 0,
						source: locations,
						focus: function() {
							// prevent value inserted on focus
							return false;
						},
						select: function( event, ui ) {
							var terms = split( this.value );
							// remove the current input
							terms.pop();
							// add the selected item
							terms.push( ui.item.value );
							// add placeholder to get the comma-and-space at the end
							terms.push( "" );
							this.value = terms.join( ", " );
							return false;
						}
					});
			}

		});
		/*
		$("#location_input").autocomplete({
			select: function(event, ui){
				var current = $("#input_thought").val();
				$("#input_thought").val(current + ui.item.value);
				$("#locations").dialog("close");
				$("#input_thought").focus();
			}
		});*/
		navigator.geolocation.getCurrentPosition(here);
		/*$("#quick_remember").click(function(){
			var query = visualSearch.searchQuery.facets();
			var text = query[3].text;

			if (query[0].location == "Here"){
				// One-shot position request.
				var location = $("#position_holder").val();
			}
			var tag = query[2].tag;
			var timeframe = query[1].timeframe;

			$.post('/thoughts', { type: "unique_thought", idea: text, location: location, tag: tag, timeframe: timeframe }, null, 'script')
			.error(function() { alert('Cannot save thought!'); });
			return true;
		});*/

		function here(position){
			$("#position_holder").val(position.coords.latitude+","+position.coords.longitude);
		};

		/*var visualSearch;
		$(document).ready(function() {
        		visualSearch = VS.init({
			  container  : $('.visual_search'),
			  query      : 'Type in your thought here...',
			  unquotable : [
			    'location', 'tag', 'timeframe', 'text'
			  ],
          callbacks  : {
            search : function(query, searchCollection) {
              var $query = $('#search_query');
              var count  = searchCollection.size();
              $query.stop().animate({opacity : 1}, {duration: 300, queue: false});
              $query.html('<span class="raquo">&raquo;</span> You searched for: ' +
                          '<b>' + (query || '<i>nothing</i>') + '</b>. ' +
                          '(' + count + ' facet' + (count==1 ? '' : 's') + ')');
              clearTimeout(window.queryHideDelay);
              window.queryHideDelay = setTimeout(function() {
                $query.animate({
                  opacity : 0
                }, {
                  duration: 1000,
                  queue: false
                });
              }, 2000);
            },
            facetMatches : function(callback) {
              callback([
                'location', 'tag', 'timeframe', 'text'
              ]);
            },
            valueMatches : function(facet, searchTerm, callback) {
              switch (facet) {
              case 'location':
                  callback([
                     'Here'
                  ]);
                  break;
                case 'tag':
                  callback([
			<% @tags.each do |tag| %>
	                    '<%= tag.tag %>'
			    <% if tag != @tags.last %>,<% end %>
			<% end %>
                  ]);
                  break;
                case 'timeframe':
                  callback([
                    'Soon',
                    'Someday',
                    'By Date',
                    'Every'
                  ]);
                  break;
              }
            }
          }
        });
      });*/
</script>
